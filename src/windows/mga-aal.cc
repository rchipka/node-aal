/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0)

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x031110
#endif


#include <node.h>
//Older version of node.h does not include this
#include <node_version.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

#ifdef NODE_VERSION
#if NODE_VERSION_AT_LEAST(10, 12, 0)
#define SWIG_NODE_AT_LEAST_1012
#endif
#endif

//Necessary to check Node.js version because V8 API changes are backported in Node.js
#if (defined(NODE_VERSION) && !defined(SWIG_NODE_AT_LEAST_1012)) || \
    (!defined(NODE_VERSION) && (V8_MAJOR_VERSION-0) < 7)
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject()
#define SWIGV8_TO_STRING(handle) (handle)->ToString()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue()
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue()
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length()
#else
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_TO_STRING(handle) (handle)->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(v8::Isolate::GetCurrent(), buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length(v8::Isolate::GetCurrent())
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) do { SWIGV8_ErrorHandler.error(code, msg); SWIG_fail; } while (0)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be reset properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See definition of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#elif (V8_MAJOR_VERSION-0) < 5
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#else
  void (*dtor) (const v8::WeakCallbackInfo<SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 5
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor, v8::WeakCallbackType::kParameter);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor, v8::WeakCallbackType::kParameter);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();

  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);
  if(objRef->InternalFieldCount() < 1) return false;
#if (V8_MAJOR_VERSION-0) < 5
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("__swig__packed_data__"));
  v8::Local<v8::Value> flag;
  if (!objRef->GetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey).ToLocal(&flag))
    return false;
#endif
  return (flag->IsBoolean() && SWIGV8_BOOLEAN_VALUE(flag));
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();

    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#elif (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackInfo<SwigV8PackedData> &data) {
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

#if (V8_MAJOR_VERSION-0) < 5
  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("__swig__packed_data__"));
  obj->SetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey, SWIGV8_BOOLEAN_NEW(true));
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 5
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete, v8::WeakCallbackType::kParameter);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();

  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#elif (V8_MAJOR_VERSION-0) < 5
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorNameGetterCallback  SwigV8AccessorGetterCallback;
typedef v8::AccessorNameSetterCallback  SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();

    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
#if (V8_MAJOR_VERSION-0) < 5
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
#else
  obj->SetAccessor(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW(symbol), getter, setter);
#endif
}

#if (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#else
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#endif
{
    char buffer[256];
    char msg[512];
    int res;

#if (V8_MAJOR_VERSION-0) < 5
    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
#else
    v8::Local<v8::String> sproperty;
    if (property->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocal(&sproperty)) {
      SWIGV8_WRITE_UTF8(sproperty, buffer, 256);
      res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
    }
    else {
      res = -1;
    }
#endif

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
fail: ;
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_aal__Accessible swig_types[0]
#define SWIGTYPE_p_aal__TextRange swig_types[1]
#define SWIGTYPE_p_char swig_types[2]
#define SWIGTYPE_p_difference_type swig_types[3]
#define SWIGTYPE_p_geometry__Point swig_types[4]
#define SWIGTYPE_p_geometry__Rectangle swig_types[5]
#define SWIGTYPE_p_geometry__Size swig_types[6]
#define SWIGTYPE_p_mga__SerializableObject swig_types[7]
#define SWIGTYPE_p_size_type swig_types[8]
#define SWIGTYPE_p_std__functionT_mga__JSVariant_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_RF_t swig_types[9]
#define SWIGTYPE_p_std__functionT_void_fmga__JSClass_RF_t swig_types[10]
#define SWIGTYPE_p_std__functionT_void_fmga__JSExport_p_mga__JSValues_RF_t swig_types[11]
#define SWIGTYPE_p_std__functionT_void_fmga__JSObject_RF_t swig_types[12]
#define SWIGTYPE_p_std__functionT_void_fmga__JSObject_p_mga__JSValues_RF_t swig_types[13]
#define SWIGTYPE_p_std__functionT_void_fmga__ScriptingContext_R_mga__JSObject_RF_t swig_types[14]
#define SWIGTYPE_p_std__functionT_void_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_R_mga__JSVariant_const_RF_t swig_types[15]
#define SWIGTYPE_p_std__setT_size_t_t swig_types[16]
#define SWIGTYPE_p_std__shared_ptrT_std__vectorT_std__string_t_t swig_types[17]
#define SWIGTYPE_p_std__unique_ptrT_aal__Accessible_t swig_types[18]
#define SWIGTYPE_p_std__vectorT_aal__AccessibleRef_t swig_types[19]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[20]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[21]
#define SWIGTYPE_p_std__wstring swig_types[22]
#define SWIGTYPE_p_value_type swig_types[23]
static swig_type_info *swig_types[25];
static swig_module_info swig_module = {swig_types, 24, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x040001
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a))


#include <stdexcept>


#include <assert.h>


#include "aal/aalcommon.h"
#include "aal/windows/accessible.h"


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = SWIGV8_INTEGER_VALUE(valRef);

  return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = SWIGV8_NUMBER_VALUE(obj);

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) SWIGV8_NUMBER_VALUE(obj);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (v8::Handle<v8::Value> obj, unsigned long long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long long longVal = (long long) SWIGV8_NUMBER_VALUE(obj);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (v8::Handle<v8::Value> obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = SWIGV8_TO_STRING(valRef);

    size_t len = SWIGV8_UTF8_LENGTH(js_str) + 1;
    char* cstr = new char[len];
    SWIGV8_WRITE_UTF8(js_str, cstr, len);

    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;

    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = SWIGV8_TO_OBJECT(valRef);
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}


SWIGINTERN int
SWIG_AsPtr_std_string (v8::Handle<v8::Value> obj, std::string **val)
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long_SS_long  (long long value)
{
  return SWIGV8_NUMBER_NEW(value);
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_size_t  (size_t value)
{
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) SWIGV8_INTEGER_VALUE(obj);

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = SWIGV8_BOOLEAN_VALUE(obj);
  return SWIG_OK;
}


SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}


#define SWIGV8_INIT node_aal_initialize


SWIGV8_ClientData _exports_SerializableObject_clientData;
SWIGV8_ClientData _exports_Point_clientData;
SWIGV8_ClientData _exports_Size_clientData;
SWIGV8_ClientData _exports_Rectangle_clientData;
SWIGV8_ClientData _exports_TextRange_clientData;
SWIGV8_ClientData _exports_Accessible_clientData;


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_mga_Success(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_mga_Success(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(mga::Success));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_mga_ScriptError(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_mga_ScriptError(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(mga::ScriptError));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_mga_RunLoopError(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_mga_RunLoopError(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(mga::RunLoopError));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_mga_Other(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_mga_Other(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(mga::Other));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_mga_CompletionFailure(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_mga_CompletionFailure(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(mga::CompletionFailure));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_SerializableObject_toJson(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  mga::SerializableObject *arg1 = (mga::SerializableObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SerializableObject_toJson.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mga__SerializableObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SerializableObject_toJson" "', argument " "1"" of type '" "mga::SerializableObject const *""'");
  }
  arg1 = reinterpret_cast< mga::SerializableObject * >(argp1);
  {
    try {
      result = ((mga::SerializableObject const *)arg1)->toJson();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_SerializableObject(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_SerializableObject(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_SerializableObject(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_SerializableObject(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_SerializableObject(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif

          if(proxy->swigCMemOwn && proxy->swigCObject) {
            mga::SerializableObject * arg1 = (mga::SerializableObject *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_SerializableObject(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  SWIG_exception(SWIG_ERROR, "Class SerializableObject can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_CheckState_Unchecked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_CheckState_Unchecked(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::CheckState::Unchecked));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_CheckState_Checked(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_CheckState_Checked(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::CheckState::Checked));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_CheckState_Indeterminate(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_CheckState_Indeterminate(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::CheckState::Indeterminate));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_MouseButton_NoButton(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_MouseButton_NoButton(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::MouseButton::NoButton));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_MouseButton_Left(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_MouseButton_Left(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::MouseButton::Left));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_MouseButton_Right(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_MouseButton_Right(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::MouseButton::Right));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_MouseButton_Middle(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_MouseButton_Middle(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::MouseButton::Middle));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_NoKey(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_NoKey(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::NoKey));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Key0(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Key0(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Key0));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Key1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Key1(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Key1));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Key2(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Key2(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Key2));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Key3(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Key3(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Key3));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Key4(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Key4(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Key4));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Key5(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Key5(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Key5));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Key6(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Key6(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Key6));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Key7(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Key7(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Key7));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Key8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Key8(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Key8));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Key9(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Key9(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Key9));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyPlus(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyPlus(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyPlus));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyMinus(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyMinus(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyMinus));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyA(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyA(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyA));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyB(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyB(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyB));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyC(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyC(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyC));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyD(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyD));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyE(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyE));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyG(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyG));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyH(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyH));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyI(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyI(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyI));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyJ(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyJ(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyJ));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyK(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyK));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyL(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyL));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyM(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyM));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyN(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyN));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyO(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyO));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyP(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyP));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyQ(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyQ(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyQ));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyR(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyR));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyS(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyS));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyT(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyT));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyU(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyU(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyU));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyV(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyV(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyV));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyW(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyW(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyW));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyX(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyX(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyX));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyY(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyY));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyZ(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyZ(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyZ));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyTab(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyTab(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyTab));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyBackspace(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyBackspace(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyBackspace));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyReturn(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyReturn(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyReturn));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyDot(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyDot(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyDot));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyComma(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyComma(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyComma));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyColon(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyColon(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyColon));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeySlash(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeySlash(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeySlash));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyBackslash(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyBackslash(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyBackslash));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyBraceLeft(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyBraceLeft(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyBraceLeft));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyBraceRight(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyBraceRight(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyBraceRight));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyDelete(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyDelete(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyDelete));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyUp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyUp(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyUp));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyEscape(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyEscape(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyEscape));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyDown(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyDown(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyDown));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyLeft(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyLeft(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyLeft));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyRight(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyRight(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyRight));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyPageUp(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyPageUp(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyPageUp));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyPageDown(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyPageDown(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyPageDown));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyEnd(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyEnd(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyEnd));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyHome(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyHome(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyHome));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeySpace(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeySpace(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeySpace));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF1(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF1));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF2(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF2(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF2));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF3(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF3(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF3));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF4(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF4(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF4));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF5(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF5(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF5));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF6(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF6(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF6));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF7(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF7(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF7));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF8(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF8));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF9(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF9(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF9));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF10(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF10(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF10));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF11(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF11(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF11));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_KeyF12(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_KeyF12(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::KeyF12));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Key_Sentinel(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Key_Sentinel(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Key::Sentinel));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Modifier_NoModifier(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Modifier_NoModifier(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Modifier::NoModifier));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Modifier_ShiftLeft(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Modifier_ShiftLeft(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Modifier::ShiftLeft));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Modifier_ShiftRight(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Modifier_ShiftRight(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Modifier::ShiftRight));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Modifier_ControlLeft(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Modifier_ControlLeft(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Modifier::ControlLeft));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Modifier_ControlRight(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Modifier_ControlRight(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Modifier::ControlRight));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Modifier_AltLeft(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Modifier_AltLeft(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Modifier::AltLeft));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Modifier_AltRight(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Modifier_AltRight(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Modifier::AltRight));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Modifier_MetaLeft(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Modifier_MetaLeft(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Modifier::MetaLeft));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Modifier_MetaRight(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Modifier_MetaRight(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Modifier::MetaRight));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_keyToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Key arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_keyToString.");

  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "keyToString" "', argument " "1"" of type '" "aal::Key""'");
  }
  arg1 = static_cast< aal::Key >(val1);
  {
    try {
      result = aal::keyToString(arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_modifierToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Modifier arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_modifierToString.");

  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "modifierToString" "', argument " "1"" of type '" "aal::Modifier""'");
  }
  arg1 = static_cast< aal::Modifier >(val1);
  {
    try {
      result = aal::modifierToString(arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_containsModifier(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Modifier arg1 ;
  aal::Modifier arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;

  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_containsModifier.");

  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "containsModifier" "', argument " "1"" of type '" "aal::Modifier""'");
  }
  arg1 = static_cast< aal::Modifier >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "containsModifier" "', argument " "2"" of type '" "aal::Modifier""'");
  }
  arg2 = static_cast< aal::Modifier >(val2);
  {
    try {
      result = (bool)aal::containsModifier(arg1,arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_modifierFromNumber(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  aal::Modifier result;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_modifierFromNumber.");

  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "modifierFromNumber" "', argument " "1"" of type '" "size_t""'");
  }
  arg1 = static_cast< size_t >(val1);
  {
    try {
      result = (aal::Modifier)aal::modifierFromNumber(arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_methodNotImplemented(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_methodNotImplemented.");

  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "methodNotImplemented" "', argument " "1"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "methodNotImplemented" "', argument " "1"" of type '" "std::string const &""'");
    }
    arg1 = ptr;
  }
  {
    try {
      aal::methodNotImplemented((std::string const &)*arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  if (SWIG_IsNewObj(res1)) delete arg1;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Point_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Point_x_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();

    geometry::Point *arg1 = (geometry::Point *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Point, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_x_set" "', argument " "1"" of type '" "geometry::Point *""'");
    }
    arg1 = reinterpret_cast< geometry::Point * >(argp1);
    ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_x_set" "', argument " "2"" of type '" "int""'");
    }
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->x = arg2;



    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Point_x_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Point_x_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;
    geometry::Point *arg1 = (geometry::Point *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int result;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Point, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_x_get" "', argument " "1"" of type '" "geometry::Point *""'");
    }
    arg1 = reinterpret_cast< geometry::Point * >(argp1);
    result = (int) ((arg1)->x);
    jsresult = SWIG_From_int(static_cast< int >(result));


    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Point_y_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Point_y_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();

    geometry::Point *arg1 = (geometry::Point *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Point, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_y_set" "', argument " "1"" of type '" "geometry::Point *""'");
    }
    arg1 = reinterpret_cast< geometry::Point * >(argp1);
    ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_y_set" "', argument " "2"" of type '" "int""'");
    }
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->y = arg2;



    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Point_y_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Point_y_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;
    geometry::Point *arg1 = (geometry::Point *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int result;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Point, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_y_get" "', argument " "1"" of type '" "geometry::Point *""'");
    }
    arg1 = reinterpret_cast< geometry::Point * >(argp1);
    result = (int) ((arg1)->y);
    jsresult = SWIG_From_int(static_cast< int >(result));


    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_Point__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  geometry::Point *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Point__SWIG_0.");
  {
    try {
      result = (geometry::Point *)new geometry::Point();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }



  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_geometry__Point, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Point__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  geometry::Point *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Point__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Point" "', argument " "1"" of type '" "int""'");
  }
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Point" "', argument " "2"" of type '" "int""'");
  }
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (geometry::Point *)new geometry::Point(arg1,arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }





  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_geometry__Point, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Point__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  geometry::Point *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  geometry::Point *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Point__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_geometry__Point,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Point" "', argument " "1"" of type '" "geometry::Point const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Point" "', argument " "1"" of type '" "geometry::Point const &""'");
  }
  arg1 = reinterpret_cast< geometry::Point * >(argp1);
  {
    try {
      result = (geometry::Point *)new geometry::Point((geometry::Point const &)*arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }




  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_geometry__Point, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Point(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;

  // switch all cases by means of series of if-returns.

  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Point__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Point__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }

  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Point__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Point__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }

  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Point__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Point__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Point");

fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Point_toJson(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Point *arg1 = (geometry::Point *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Point_toJson.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_geometry__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_toJson" "', argument " "1"" of type '" "geometry::Point const *""'");
  }
  arg1 = reinterpret_cast< geometry::Point * >(argp1);
  {
    try {
      result = ((geometry::Point const *)arg1)->toJson();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Point(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Point(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Point(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Point(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Point(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif

          if(proxy->swigCMemOwn && proxy->swigCObject) {
            geometry::Point * arg1 = (geometry::Point *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Size_width_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Size_width_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();

    geometry::Size *arg1 = (geometry::Size *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Size, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_width_set" "', argument " "1"" of type '" "geometry::Size *""'");
    }
    arg1 = reinterpret_cast< geometry::Size * >(argp1);
    ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Size_width_set" "', argument " "2"" of type '" "int""'");
    }
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->width = arg2;



    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Size_width_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Size_width_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;
    geometry::Size *arg1 = (geometry::Size *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int result;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Size, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_width_get" "', argument " "1"" of type '" "geometry::Size *""'");
    }
    arg1 = reinterpret_cast< geometry::Size * >(argp1);
    result = (int) ((arg1)->width);
    jsresult = SWIG_From_int(static_cast< int >(result));


    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Size_height_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Size_height_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();

    geometry::Size *arg1 = (geometry::Size *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Size, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_height_set" "', argument " "1"" of type '" "geometry::Size *""'");
    }
    arg1 = reinterpret_cast< geometry::Size * >(argp1);
    ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Size_height_set" "', argument " "2"" of type '" "int""'");
    }
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->height = arg2;



    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Size_height_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Size_height_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;
    geometry::Size *arg1 = (geometry::Size *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int result;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Size, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_height_get" "', argument " "1"" of type '" "geometry::Size *""'");
    }
    arg1 = reinterpret_cast< geometry::Size * >(argp1);
    result = (int) ((arg1)->height);
    jsresult = SWIG_From_int(static_cast< int >(result));


    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_Size__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  geometry::Size *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Size__SWIG_0.");
  {
    try {
      result = (geometry::Size *)new geometry::Size();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }



  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_geometry__Size, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Size__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  geometry::Size *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Size__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Size" "', argument " "1"" of type '" "int""'");
  }
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Size" "', argument " "2"" of type '" "int""'");
  }
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (geometry::Size *)new geometry::Size(arg1,arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }





  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_geometry__Size, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Size__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  geometry::Size *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  geometry::Size *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Size__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_geometry__Size,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Size" "', argument " "1"" of type '" "geometry::Size const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Size" "', argument " "1"" of type '" "geometry::Size const &""'");
  }
  arg1 = reinterpret_cast< geometry::Size * >(argp1);
  {
    try {
      result = (geometry::Size *)new geometry::Size((geometry::Size const &)*arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }




  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_geometry__Size, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;

  // switch all cases by means of series of if-returns.

  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Size__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Size__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }

  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Size__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Size__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }

  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Size__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Size__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Size");

fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Size_toJson(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Size *arg1 = (geometry::Size *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Size_toJson.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_geometry__Size, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Size_toJson" "', argument " "1"" of type '" "geometry::Size const *""'");
  }
  arg1 = reinterpret_cast< geometry::Size * >(argp1);
  {
    try {
      result = ((geometry::Size const *)arg1)->toJson();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Size(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Size(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Size(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Size(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Size(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif

          if(proxy->swigCMemOwn && proxy->swigCObject) {
            geometry::Size * arg1 = (geometry::Size *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Rectangle_position_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Rectangle_position_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();

    geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
    geometry::Point *arg2 = (geometry::Point *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_position_set" "', argument " "1"" of type '" "geometry::Rectangle *""'");
    }
    arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_geometry__Point, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rectangle_position_set" "', argument " "2"" of type '" "geometry::Point *""'");
    }
    arg2 = reinterpret_cast< geometry::Point * >(argp2);
    if (arg1) (arg1)->position = *arg2;



    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Rectangle_position_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Rectangle_position_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;
    geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    geometry::Point *result = 0 ;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_position_get" "', argument " "1"" of type '" "geometry::Rectangle *""'");
    }
    arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
    result = (geometry::Point *)& ((arg1)->position);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_geometry__Point, 0 |  0 );


    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Rectangle_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Rectangle_size_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();

    geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
    geometry::Size *arg2 = (geometry::Size *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_size_set" "', argument " "1"" of type '" "geometry::Rectangle *""'");
    }
    arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_geometry__Size, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rectangle_size_set" "', argument " "2"" of type '" "geometry::Size *""'");
    }
    arg2 = reinterpret_cast< geometry::Size * >(argp2);
    if (arg1) (arg1)->size = *arg2;



    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Rectangle_size_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Rectangle_size_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;
    geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    geometry::Size *result = 0 ;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_size_get" "', argument " "1"" of type '" "geometry::Rectangle *""'");
    }
    arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
    result = (geometry::Size *)& ((arg1)->size);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_geometry__Size, 0 |  0 );


    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_Rectangle__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  geometry::Rectangle *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Rectangle__SWIG_0.");
  {
    try {
      result = (geometry::Rectangle *)new geometry::Rectangle();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }



  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_geometry__Rectangle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Rectangle__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  geometry::Rectangle *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  geometry::Rectangle *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Rectangle__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_geometry__Rectangle,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rectangle" "', argument " "1"" of type '" "geometry::Rectangle const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rectangle" "', argument " "1"" of type '" "geometry::Rectangle const &""'");
  }
  arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
  {
    try {
      result = (geometry::Rectangle *)new geometry::Rectangle((geometry::Rectangle const &)*arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }




  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_geometry__Rectangle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Rectangle__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  geometry::Rectangle *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Rectangle__SWIG_2.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rectangle" "', argument " "1"" of type '" "int""'");
  }
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rectangle" "', argument " "2"" of type '" "int""'");
  }
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Rectangle" "', argument " "3"" of type '" "int""'");
  }
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Rectangle" "', argument " "4"" of type '" "int""'");
  }
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (geometry::Rectangle *)new geometry::Rectangle(arg1,arg2,arg3,arg4);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }







  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_geometry__Rectangle, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Rectangle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;

  // switch all cases by means of series of if-returns.

  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Rectangle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Rectangle__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }

  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Rectangle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Rectangle__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }

  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Rectangle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Rectangle__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Rectangle");

fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Rectangle_contains__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
  geometry::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_contains" "', argument " "1"" of type '" "geometry::Rectangle const *""'");
  }
  arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rectangle_contains" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rectangle_contains" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  arg2 = reinterpret_cast< geometry::Point * >(argp2);
  {
    try {
      result = (bool)((geometry::Rectangle const *)arg1)->contains((geometry::Point const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Rectangle_contains__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
  geometry::Rectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_contains" "', argument " "1"" of type '" "geometry::Rectangle const *""'");
  }
  arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Rectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rectangle_contains" "', argument " "2"" of type '" "geometry::Rectangle const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rectangle_contains" "', argument " "2"" of type '" "geometry::Rectangle const &""'");
  }
  arg2 = reinterpret_cast< geometry::Rectangle * >(argp2);
  {
    try {
      result = (bool)((geometry::Rectangle const *)arg1)->contains((geometry::Rectangle const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Rectangle__wrap_Rectangle_contains(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;


  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Rectangle_contains__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Rectangle_contains__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Rectangle_contains__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Rectangle_contains__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function contains.");

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Rectangle_empty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Rectangle_empty.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_empty" "', argument " "1"" of type '" "geometry::Rectangle const *""'");
  }
  arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
  {
    try {
      result = (bool)((geometry::Rectangle const *)arg1)->empty();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Rectangle_minX(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Rectangle_minX.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_minX" "', argument " "1"" of type '" "geometry::Rectangle const *""'");
  }
  arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
  {
    try {
      result = (int)((geometry::Rectangle const *)arg1)->minX();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Rectangle_maxX(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Rectangle_maxX.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_maxX" "', argument " "1"" of type '" "geometry::Rectangle const *""'");
  }
  arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
  {
    try {
      result = (int)((geometry::Rectangle const *)arg1)->maxX();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Rectangle_minY(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Rectangle_minY.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_minY" "', argument " "1"" of type '" "geometry::Rectangle const *""'");
  }
  arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
  {
    try {
      result = (int)((geometry::Rectangle const *)arg1)->minY();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Rectangle_maxY(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Rectangle_maxY.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_maxY" "', argument " "1"" of type '" "geometry::Rectangle const *""'");
  }
  arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
  {
    try {
      result = (int)((geometry::Rectangle const *)arg1)->maxY();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Rectangle_toJson(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Rectangle *arg1 = (geometry::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Rectangle_toJson.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_geometry__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_toJson" "', argument " "1"" of type '" "geometry::Rectangle const *""'");
  }
  arg1 = reinterpret_cast< geometry::Rectangle * >(argp1);
  {
    try {
      result = ((geometry::Rectangle const *)arg1)->toJson();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Rectangle(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Rectangle(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Rectangle(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Rectangle(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Rectangle(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif

          if(proxy->swigCMemOwn && proxy->swigCObject) {
            geometry::Rectangle * arg1 = (geometry::Rectangle *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_TextRange_start_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_TextRange_start_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();

    aal::TextRange *arg1 = (aal::TextRange *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_aal__TextRange, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextRange_start_set" "', argument " "1"" of type '" "aal::TextRange *""'");
    }
    arg1 = reinterpret_cast< aal::TextRange * >(argp1);
    ecode2 = SWIG_AsVal_size_t(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TextRange_start_set" "', argument " "2"" of type '" "size_t""'");
    }
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->start = arg2;



    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_TextRange_start_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_TextRange_start_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;
    aal::TextRange *arg1 = (aal::TextRange *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t result;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_aal__TextRange, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextRange_start_get" "', argument " "1"" of type '" "aal::TextRange *""'");
    }
    arg1 = reinterpret_cast< aal::TextRange * >(argp1);
    result =  ((arg1)->start);
    jsresult = SWIG_From_size_t(static_cast< size_t >(result));


    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_TextRange_end_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_TextRange_end_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();

    aal::TextRange *arg1 = (aal::TextRange *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_aal__TextRange, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextRange_end_set" "', argument " "1"" of type '" "aal::TextRange *""'");
    }
    arg1 = reinterpret_cast< aal::TextRange * >(argp1);
    ecode2 = SWIG_AsVal_size_t(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TextRange_end_set" "', argument " "2"" of type '" "size_t""'");
    }
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->end = arg2;



    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_TextRange_end_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_TextRange_end_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;
    aal::TextRange *arg1 = (aal::TextRange *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t result;

    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_aal__TextRange, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextRange_end_get" "', argument " "1"" of type '" "aal::TextRange *""'");
    }
    arg1 = reinterpret_cast< aal::TextRange * >(argp1);
    result =  ((arg1)->end);
    jsresult = SWIG_From_size_t(static_cast< size_t >(result));


    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_TextRange__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  aal::TextRange *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TextRange__SWIG_0.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TextRange" "', argument " "1"" of type '" "size_t""'");
  }
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TextRange" "', argument " "2"" of type '" "size_t""'");
  }
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (aal::TextRange *)new aal::TextRange(arg1,arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }





  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_aal__TextRange, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TextRange__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> self = args.Holder();
  aal::TextRange *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TextRange__SWIG_1.");
  {
    try {
      result = (aal::TextRange *)new aal::TextRange();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }



  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_aal__TextRange, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TextRange(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;

  // switch all cases by means of series of if-returns.

  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TextRange__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TextRange__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }

  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TextRange__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TextRange__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_TextRange");

fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TextRange_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::TextRange *arg1 = (aal::TextRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TextRange_isEmpty.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__TextRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextRange_isEmpty" "', argument " "1"" of type '" "aal::TextRange *""'");
  }
  arg1 = reinterpret_cast< aal::TextRange * >(argp1);
  {
    try {
      result = (bool)(arg1)->isEmpty();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TextRange_toJson(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::TextRange *arg1 = (aal::TextRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TextRange_toJson.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__TextRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TextRange_toJson" "', argument " "1"" of type '" "aal::TextRange const *""'");
  }
  arg1 = reinterpret_cast< aal::TextRange * >(argp1);
  {
    try {
      result = ((aal::TextRange const *)arg1)->toJson();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TextRange(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TextRange(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TextRange(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_TextRange(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_TextRange(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif

          if(proxy->swigCMemOwn && proxy->swigCObject) {
            aal::TextRange * arg1 = (aal::TextRange *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Unknown(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Unknown(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Unknown));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Any(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Any(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Any));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Application(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Application(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Application));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Window(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Window(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Window));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Button(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Button(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Button));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_RadioButton(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_RadioButton(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::RadioButton));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_RadioGroup(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_RadioGroup(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::RadioGroup));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_CheckBox(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_CheckBox(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::CheckBox));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_ComboBox(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_ComboBox(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::ComboBox));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Expander(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Expander(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Expander));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Grid(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Grid(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Grid));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_TextBox(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_TextBox(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::TextBox));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_TreeView(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_TreeView(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::TreeView));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Label(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Label(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Label));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Pane(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Pane(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Pane));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Menu(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Menu(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Menu));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_MenuBar(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_MenuBar(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::MenuBar));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_MenuItem(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_MenuItem(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::MenuItem));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Separator(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Separator(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Separator));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_SplitContainer(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_SplitContainer(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::SplitContainer));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Splitter(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Splitter(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Splitter));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_GroupBox(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_GroupBox(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::GroupBox));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Image(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Image(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Image));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_TabView(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_TabView(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::TabView));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_TabPage(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_TabPage(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::TabPage));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_DatePicker(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_DatePicker(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::DatePicker));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Row(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Row(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Row));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Column(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Column(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Column));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Cell(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Cell(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Cell));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_ScrollBox(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_ScrollBox(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::ScrollBox));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Slider(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Slider(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Slider));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Stepper(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Stepper(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Stepper));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_List(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_List(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::List));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_IconView(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_IconView(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::IconView));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_ProgressIndicator(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_ProgressIndicator(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::ProgressIndicator));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_BusyIndicator(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_BusyIndicator(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::BusyIndicator));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_ScrollBar(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_ScrollBar(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::ScrollBar));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_ScrollThumb(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_ScrollThumb(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::ScrollThumb));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_HyperLink(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_HyperLink(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::HyperLink));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_aal_Role_Sentinel(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_aal_Role_Sentinel(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();

    v8::Handle<v8::Value> jsresult;

    jsresult = SWIG_From_int(static_cast< int >(aal::Role::Sentinel));

    SWIGV8_RETURN_INFO(jsresult, info);

    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_roleToString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Role arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_roleToString.");

  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "roleToString" "', argument " "1"" of type '" "aal::Role""'");
  }
  arg1 = static_cast< aal::Role >(val1);
  {
    try {
      result = aal::roleToString(arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_roleToFriendlyString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Role arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_roleToFriendlyString.");

  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "roleToFriendlyString" "', argument " "1"" of type '" "aal::Role""'");
  }
  arg1 = static_cast< aal::Role >(val1);
  {
    try {
      result = aal::roleToFriendlyString(arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_roleToJSType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Role arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_roleToJSType.");

  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "roleToJSType" "', argument " "1"" of type '" "aal::Role""'");
  }
  arg1 = static_cast< aal::Role >(val1);
  {
    try {
      result = aal::roleToJSType(arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_init(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_init.");

  {
    try {
      aal::Accessible::init();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_accessibilitySetup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_accessibilitySetup.");

  {
    try {
      result = (bool)aal::Accessible::accessibilitySetup();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getByPid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  aal::AccessibleRef result;
  void *temp ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getByPid.");

  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Accessible_getByPid" "', argument " "1"" of type '" "int""'");
  }
  arg1 = static_cast< int >(val1);
  {
    try {
      result = aal::Accessible::getByPid(arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }

  temp = (&result)->release();
  jsresult = SWIG_NewPointerObj(temp, SWIGTYPE_p_aal__Accessible, SWIG_POINTER_OWN);



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getRunningProcess(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  std::wstring *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getRunningProcess.");

  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__wstring,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getRunningProcess" "', argument " "1"" of type '" "std::wstring const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_getRunningProcess" "', argument " "1"" of type '" "std::wstring const &""'");
  }
  arg1 = reinterpret_cast< std::wstring * >(argp1);
  {
    try {
      result = (int)aal::Accessible::getRunningProcess((std::wstring const &)*arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getRunningProcessByName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  std::wstring *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< int > > result;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getRunningProcessByName.");

  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__wstring,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getRunningProcessByName" "', argument " "1"" of type '" "std::wstring const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_getRunningProcessByName" "', argument " "1"" of type '" "std::wstring const &""'");
  }
  arg1 = reinterpret_cast< std::wstring * >(argp1);
  {
    try {
      result = aal::Accessible::getRunningProcessByName((std::wstring const &)*arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new std::vector< int >(static_cast< const std::vector< int >& >(result))), SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN |  0 );


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Accessible(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Accessible(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Accessible(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Accessible(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Accessible(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif

          if(proxy->swigCMemOwn && proxy->swigCObject) {
            aal::Accessible * arg1 = (aal::Accessible *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_Accessible_clone(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleRef result;
  void *temp ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_clone.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_clone" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->clone();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }

  temp = (&result)->release();
  jsresult = SWIG_NewPointerObj(temp, SWIGTYPE_p_aal__Accessible, SWIG_POINTER_OWN);



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isRoot(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isRoot.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isRoot" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isRoot();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isValid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isValid.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isValid" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isValid();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  aal::Accessible *arg2 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_equals.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_equals" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_equals" "', argument " "2"" of type '" "aal::Accessible *""'");
  }
  arg2 = reinterpret_cast< aal::Accessible * >(argp2);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->equals(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_canFocus(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_canFocus.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_canFocus" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->canFocus();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isFocused(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isFocused.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isFocused" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isFocused();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setFocused(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setFocused.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setFocused" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->setFocused();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isEnabled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isEnabled.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isEnabled" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isEnabled();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setEnabled(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setEnabled.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setEnabled" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_setEnabled" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setEnabled(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isEditable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isEditable.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isEditable" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isEditable();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isReadOnly(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isReadOnly.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isReadOnly" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isReadOnly();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isSecure(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isSecure.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isSecure" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isSecure();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isHorizontal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isHorizontal.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isHorizontal" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isHorizontal();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getCheckState(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::CheckState result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getCheckState.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getCheckState" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (aal::CheckState)((aal::Accessible const *)arg1)->getCheckState();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setCheckState(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  aal::CheckState arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setCheckState.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setCheckState" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_setCheckState" "', argument " "2"" of type '" "aal::CheckState""'");
  }
  arg2 = static_cast< aal::CheckState >(val2);
  {
    try {
      (arg1)->setCheckState(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getValue.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getValue" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (double)((aal::Accessible const *)arg1)->getValue();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_double(static_cast< double >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getMaxValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getMaxValue.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getMaxValue" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (double)((aal::Accessible const *)arg1)->getMaxValue();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_double(static_cast< double >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getMinValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getMinValue.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getMinValue" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (double)((aal::Accessible const *)arg1)->getMinValue();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_double(static_cast< double >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setValue.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setValue" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_setValue" "', argument " "2"" of type '" "double""'");
  }
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setValue(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getRange(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getRange.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getRange" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (double)((aal::Accessible const *)arg1)->getRange();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_double(static_cast< double >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getActiveTabPage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getActiveTabPage.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getActiveTabPage" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getActiveTabPage();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setActiveTabPage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setActiveTabPage.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setActiveTabPage" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_setActiveTabPage" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_setActiveTabPage" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setActiveTabPage((std::string const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();

  if (SWIG_IsNewObj(res2)) delete arg2;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_activate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_activate.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_activate" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->activate();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isActiveTab(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isActiveTab.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isActiveTab" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isActiveTab();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isSelected(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isSelected.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isSelected" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isSelected();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setSelected(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setSelected.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setSelected" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_setSelected" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setSelected(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getScrollPosition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getScrollPosition.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getScrollPosition" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (double)((aal::Accessible const *)arg1)->getScrollPosition();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_double(static_cast< double >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setScrollPosition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setScrollPosition.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setScrollPosition" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_setScrollPosition" "', argument " "2"" of type '" "double""'");
  }
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setScrollPosition(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getParent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleRef result;
  void *temp ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getParent.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getParent" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getParent();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }

  temp = (&result)->release();
  jsresult = SWIG_NewPointerObj(temp, SWIGTYPE_p_aal__Accessible, SWIG_POINTER_OWN);



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getContainingRow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleRef result;
  void *temp ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getContainingRow.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getContainingRow" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getContainingRow();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }

  temp = (&result)->release();
  jsresult = SWIG_NewPointerObj(temp, SWIGTYPE_p_aal__Accessible, SWIG_POINTER_OWN);



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getHorizontalScrollBar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleRef result;
  void *temp ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getHorizontalScrollBar.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getHorizontalScrollBar" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getHorizontalScrollBar();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }

  temp = (&result)->release();
  jsresult = SWIG_NewPointerObj(temp, SWIGTYPE_p_aal__Accessible, SWIG_POINTER_OWN);



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getVerticalScrollBar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleRef result;
  void *temp ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getVerticalScrollBar.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getVerticalScrollBar" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getVerticalScrollBar();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }

  temp = (&result)->release();
  jsresult = SWIG_NewPointerObj(temp, SWIGTYPE_p_aal__Accessible, SWIG_POINTER_OWN);



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getHeader(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleRef result;
  void *temp ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getHeader.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getHeader" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getHeader();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }

  temp = (&result)->release();
  jsresult = SWIG_NewPointerObj(temp, SWIGTYPE_p_aal__Accessible, SWIG_POINTER_OWN);



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getCloseButton(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleRef result;
  void *temp ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getCloseButton.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getCloseButton" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getCloseButton();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }

  temp = (&result)->release();
  jsresult = SWIG_NewPointerObj(temp, SWIGTYPE_p_aal__Accessible, SWIG_POINTER_OWN);



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_children__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  aal::AccessibleList *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_children" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_aal__AccessibleRef_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_children" "', argument " "2"" of type '" "aal::AccessibleList &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_children" "', argument " "2"" of type '" "aal::AccessibleList &""'");
  }
  arg2 = reinterpret_cast< aal::AccessibleList * >(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Accessible_children" "', argument " "3"" of type '" "bool""'");
  }
  arg3 = static_cast< bool >(val3);
  {
    try {
      ((aal::Accessible const *)arg1)->children(*arg2,arg3);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();




  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_children__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleList result;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_children" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->children();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    int length = (&result)->size();
    v8::Local<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), length);

    for (int i = 0; i < length; i++)
    {
      array->Set(i, SWIG_NewPointerObj((&result)->at(i).release(), SWIGTYPE_p_aal__Accessible, 0 |  0 ));
    }

    jsresult = array;
  }


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible__wrap_Accessible_children(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;


  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_children__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_children__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_children__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_children__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function children.");

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_windows(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleList result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_windows.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_windows" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->windows();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    int length = (&result)->size();
    v8::Local<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), length);

    for (int i = 0; i < length; i++)
    {
      array->Set(i, SWIG_NewPointerObj((&result)->at(i).release(), SWIGTYPE_p_aal__Accessible, 0 |  0 ));
    }

    jsresult = array;
  }


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_tabPages(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleList result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_tabPages.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_tabPages" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->tabPages();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    int length = (&result)->size();
    v8::Local<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), length);

    for (int i = 0; i < length; i++)
    {
      array->Set(i, SWIG_NewPointerObj((&result)->at(i).release(), SWIGTYPE_p_aal__Accessible, 0 |  0 ));
    }

    jsresult = array;
  }


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_rows(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleList result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_rows.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_rows" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->rows();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    int length = (&result)->size();
    v8::Local<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), length);

    for (int i = 0; i < length; i++)
    {
      array->Set(i, SWIG_NewPointerObj((&result)->at(i).release(), SWIGTYPE_p_aal__Accessible, 0 |  0 ));
    }

    jsresult = array;
  }


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_rowEntries(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleList result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_rowEntries.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_rowEntries" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->rowEntries();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    int length = (&result)->size();
    v8::Local<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), length);

    for (int i = 0; i < length; i++)
    {
      array->Set(i, SWIG_NewPointerObj((&result)->at(i).release(), SWIGTYPE_p_aal__Accessible, 0 |  0 ));
    }

    jsresult = array;
  }


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_columns(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleList result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_columns.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_columns" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->columns();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    int length = (&result)->size();
    v8::Local<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), length);

    for (int i = 0; i < length; i++)
    {
      array->Set(i, SWIG_NewPointerObj((&result)->at(i).release(), SWIGTYPE_p_aal__Accessible, 0 |  0 ));
    }

    jsresult = array;
  }


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_columnEntries(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::AccessibleList result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_columnEntries.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_columnEntries" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->columnEntries();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    int length = (&result)->size();
    v8::Local<v8::Array> array = v8::Array::New(v8::Isolate::GetCurrent(), length);

    for (int i = 0; i < length; i++)
    {
      array->Set(i, SWIG_NewPointerObj((&result)->at(i).release(), SWIGTYPE_p_aal__Accessible, 0 |  0 ));
    }

    jsresult = array;
  }


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_fromPoint(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  geometry::Point arg1 ;
  aal::Accessible *arg2 = (aal::Accessible *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  aal::AccessibleRef result;
  void *temp ;

  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_fromPoint.");

  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_geometry__Point,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_fromPoint" "', argument " "1"" of type '" "geometry::Point""'");
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_fromPoint" "', argument " "1"" of type '" "geometry::Point""'");
    } else {
      arg1 = *(reinterpret_cast< geometry::Point * >(argp1));
    }
  }
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_fromPoint" "', argument " "2"" of type '" "aal::Accessible *""'");
  }
  arg2 = reinterpret_cast< aal::Accessible * >(argp2);
  {
    try {
      result = aal::Accessible::fromPoint(arg1,arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }

  temp = (&result)->release();
  jsresult = SWIG_NewPointerObj(temp, SWIGTYPE_p_aal__Accessible, SWIG_POINTER_OWN);



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getID(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getID.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getID" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getID();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getName.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getName" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getName();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getHelp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getHelp.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getHelp" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getHelp();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getRole(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::Role result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getRole.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getRole" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (aal::Role)((aal::Accessible const *)arg1)->getRole();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_int(static_cast< int >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isInternal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isInternal.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isInternal" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isInternal();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getCaretPosition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getCaretPosition.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getCaretPosition" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getCaretPosition();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setCaretPosition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setCaretPosition.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setCaretPosition" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_setCaretPosition" "', argument " "2"" of type '" "size_t""'");
  }
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->setCaretPosition(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getBounds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  geometry::Rectangle result;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getBounds.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getBounds" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_getBounds" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getBounds(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new geometry::Rectangle(static_cast< const geometry::Rectangle& >(result))), SWIGTYPE_p_geometry__Rectangle, SWIG_POINTER_OWN |  0 );



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setBounds(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  geometry::Rectangle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setBounds.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setBounds" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Rectangle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_setBounds" "', argument " "2"" of type '" "geometry::Rectangle const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_setBounds" "', argument " "2"" of type '" "geometry::Rectangle const &""'");
  }
  arg2 = reinterpret_cast< geometry::Rectangle * >(argp2);
  {
    try {
      (arg1)->setBounds((geometry::Rectangle const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_insertText(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;

  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_insertText.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_insertText" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_insertText" "', argument " "2"" of type '" "size_t""'");
  }
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Accessible_insertText" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_insertText" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->insertText(arg2,(std::string const &)*arg3);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  if (SWIG_IsNewObj(res3)) delete arg3;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getText(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getText.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getText" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getText();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getTitle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getTitle.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getTitle" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getTitle();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setText(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setText.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setText" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_setText" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_setText" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setText((std::string const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();

  if (SWIG_IsNewObj(res2)) delete arg2;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setTitle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setTitle.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setTitle" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_setTitle" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_setTitle" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setTitle((std::string const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();

  if (SWIG_IsNewObj(res2)) delete arg2;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getDescription(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getDescription.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getDescription" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getDescription();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_menuShown(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_menuShown.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_menuShown" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->menuShown();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_showMenu(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_showMenu.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_showMenu" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      ((aal::Accessible const *)arg1)->showMenu();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getSelectedText(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getSelectedText.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getSelectedText" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getSelectedText();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setSelectedText(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setSelectedText.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setSelectedText" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_setSelectedText" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_setSelectedText" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setSelectedText((std::string const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();

  if (SWIG_IsNewObj(res2)) delete arg2;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getSelectionRange(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  aal::TextRange result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getSelectionRange.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getSelectionRange" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getSelectionRange();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new aal::TextRange(static_cast< const aal::TextRange& >(result))), SWIGTYPE_p_aal__TextRange, SWIG_POINTER_OWN |  0 );


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setSelectionRange(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  aal::TextRange arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setSelectionRange.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setSelectionRange" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_aal__TextRange,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_setSelectionRange" "', argument " "2"" of type '" "aal::TextRange""'");
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_setSelectionRange" "', argument " "2"" of type '" "aal::TextRange""'");
    } else {
      arg2 = *(reinterpret_cast< aal::TextRange * >(argp2));
    }
  }
  {
    try {
      (arg1)->setSelectionRange(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getDate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getDate.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getDate" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getDate();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setDate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setDate.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setDate" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_setDate" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_setDate" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setDate((std::string const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();

  if (SWIG_IsNewObj(res2)) delete arg2;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getCharacterCount(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getCharacterCount.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getCharacterCount" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getCharacterCount();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getSelectedIndexes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< size_t > result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getSelectedIndexes.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getSelectedIndexes" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getSelectedIndexes();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new std::set< size_t >(static_cast< const std::set< size_t >& >(result))), SWIGTYPE_p_std__setT_size_t_t, SWIG_POINTER_OWN |  0 );


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setSelectedIndexes(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  std::set< size_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setSelectedIndexes.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setSelectedIndexes" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__setT_size_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_setSelectedIndexes" "', argument " "2"" of type '" "std::set< size_t > const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_setSelectedIndexes" "', argument " "2"" of type '" "std::set< size_t > const &""'");
  }
  arg2 = reinterpret_cast< std::set< size_t > * >(argp2);
  {
    try {
      (arg1)->setSelectedIndexes((std::set< size_t > const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_mouseDown__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  geometry::Point *arg2 = 0 ;
  aal::MouseButton arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_mouseDown" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_mouseDown" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_mouseDown" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  arg2 = reinterpret_cast< geometry::Point * >(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Accessible_mouseDown" "', argument " "3"" of type '" "aal::MouseButton""'");
  }
  arg3 = static_cast< aal::MouseButton >(val3);
  {
    try {
      (arg1)->mouseDown((geometry::Point const &)*arg2,arg3);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();




  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_mouseDown__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  geometry::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_mouseDown" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_mouseDown" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_mouseDown" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  arg2 = reinterpret_cast< geometry::Point * >(argp2);
  {
    try {
      (arg1)->mouseDown((geometry::Point const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible__wrap_Accessible_mouseDown(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;


  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_mouseDown__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_mouseDown__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_mouseDown__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_mouseDown__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mouseDown.");

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_mouseUp__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  geometry::Point *arg2 = 0 ;
  aal::MouseButton arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_mouseUp" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_mouseUp" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_mouseUp" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  arg2 = reinterpret_cast< geometry::Point * >(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Accessible_mouseUp" "', argument " "3"" of type '" "aal::MouseButton""'");
  }
  arg3 = static_cast< aal::MouseButton >(val3);
  {
    try {
      (arg1)->mouseUp((geometry::Point const &)*arg2,arg3);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();




  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_mouseUp__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  geometry::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_mouseUp" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_mouseUp" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_mouseUp" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  arg2 = reinterpret_cast< geometry::Point * >(argp2);
  {
    try {
      (arg1)->mouseUp((geometry::Point const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible__wrap_Accessible_mouseUp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;


  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_mouseUp__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_mouseUp__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_mouseUp__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_mouseUp__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mouseUp.");

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_mouseMove(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  geometry::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_mouseMove.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_mouseMove" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_mouseMove" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_mouseMove" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  arg2 = reinterpret_cast< geometry::Point * >(argp2);
  {
    try {
      (arg1)->mouseMove((geometry::Point const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_mouseMoveTo(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  geometry::Point *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_mouseMoveTo.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_mouseMoveTo" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Point,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_mouseMoveTo" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_mouseMoveTo" "', argument " "2"" of type '" "geometry::Point const &""'");
  }
  arg2 = reinterpret_cast< geometry::Point * >(argp2);
  {
    try {
      (arg1)->mouseMoveTo((geometry::Point const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_mouseDrag__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  geometry::Point arg2 ;
  geometry::Point arg3 ;
  aal::MouseButton arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_mouseDrag" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Point,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_mouseDrag" "', argument " "2"" of type '" "geometry::Point""'");
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_mouseDrag" "', argument " "2"" of type '" "geometry::Point""'");
    } else {
      arg2 = *(reinterpret_cast< geometry::Point * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_geometry__Point,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Accessible_mouseDrag" "', argument " "3"" of type '" "geometry::Point""'");
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_mouseDrag" "', argument " "3"" of type '" "geometry::Point""'");
    } else {
      arg3 = *(reinterpret_cast< geometry::Point * >(argp3));
    }
  }
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Accessible_mouseDrag" "', argument " "4"" of type '" "aal::MouseButton""'");
  }
  arg4 = static_cast< aal::MouseButton >(val4);
  {
    try {
      (arg1)->mouseDrag(arg2,arg3,arg4);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_mouseDrag__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  geometry::Point arg2 ;
  geometry::Point arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_mouseDrag" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_geometry__Point,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_mouseDrag" "', argument " "2"" of type '" "geometry::Point""'");
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_mouseDrag" "', argument " "2"" of type '" "geometry::Point""'");
    } else {
      arg2 = *(reinterpret_cast< geometry::Point * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_geometry__Point,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Accessible_mouseDrag" "', argument " "3"" of type '" "geometry::Point""'");
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_mouseDrag" "', argument " "3"" of type '" "geometry::Point""'");
    } else {
      arg3 = *(reinterpret_cast< geometry::Point * >(argp3));
    }
  }
  {
    try {
      (arg1)->mouseDrag(arg2,arg3);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible__wrap_Accessible_mouseDrag(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;


  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_mouseDrag__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_mouseDrag__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_mouseDrag__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_mouseDrag__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mouseDrag.");

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getMousePosition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  geometry::Point result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getMousePosition.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getMousePosition" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getMousePosition();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_NewPointerObj((new geometry::Point(static_cast< const geometry::Point& >(result))), SWIGTYPE_p_geometry__Point, SWIG_POINTER_OWN |  0 );


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_keyDown(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  aal::Key arg2 ;
  aal::Modifier arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_keyDown.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_keyDown" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_keyDown" "', argument " "2"" of type '" "aal::Key""'");
  }
  arg2 = static_cast< aal::Key >(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Accessible_keyDown" "', argument " "3"" of type '" "aal::Modifier""'");
  }
  arg3 = static_cast< aal::Modifier >(val3);
  {
    try {
      ((aal::Accessible const *)arg1)->keyDown(arg2,arg3);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();




  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_keyUp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  aal::Key arg2 ;
  aal::Modifier arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_keyUp.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_keyUp" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_keyUp" "', argument " "2"" of type '" "aal::Key""'");
  }
  arg2 = static_cast< aal::Key >(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Accessible_keyUp" "', argument " "3"" of type '" "aal::Modifier""'");
  }
  arg3 = static_cast< aal::Modifier >(val3);
  {
    try {
      ((aal::Accessible const *)arg1)->keyUp(arg2,arg3);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();




  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_keyPress(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  aal::Key arg2 ;
  aal::Modifier arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_keyPress.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_keyPress" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_keyPress" "', argument " "2"" of type '" "aal::Key""'");
  }
  arg2 = static_cast< aal::Key >(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Accessible_keyPress" "', argument " "3"" of type '" "aal::Modifier""'");
  }
  arg3 = static_cast< aal::Modifier >(val3);
  {
    try {
      ((aal::Accessible const *)arg1)->keyPress(arg2,arg3);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();




  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_typeString(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_typeString.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_typeString" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_typeString" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_typeString" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      ((aal::Accessible const *)arg1)->typeString((std::string const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();

  if (SWIG_IsNewObj(res2)) delete arg2;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_click(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_click.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_click" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->click();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_confirm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_confirm.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_confirm" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->confirm();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_stepUp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_stepUp.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_stepUp" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->stepUp();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_stepDown(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_stepDown.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_stepDown" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->stepDown();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_scrollLeft(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_scrollLeft.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_scrollLeft" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->scrollLeft();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_scrollRight(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_scrollRight.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_scrollRight" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->scrollRight();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_scrollUp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_scrollUp.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_scrollUp" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->scrollUp();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_scrollDown(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_scrollDown.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_scrollDown" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->scrollDown();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_increment(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_increment.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_increment" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->increment();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_decrement(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_decrement.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_decrement" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->decrement();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_show(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_show.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_show" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->show();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_bringToFront(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_bringToFront.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_bringToFront" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      (arg1)->bringToFront();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_highlight(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_highlight.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_highlight" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      ((aal::Accessible const *)arg1)->highlight();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_removeHighlight(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_removeHighlight.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_removeHighlight" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      ((aal::Accessible const *)arg1)->removeHighlight();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isExpandable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isExpandable.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isExpandable" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isExpandable();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_isExpanded(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_isExpanded.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_isExpanded" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->isExpanded();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setExpanded(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setExpanded.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setExpanded" "', argument " "1"" of type '" "aal::Accessible *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_setExpanded" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setExpanded(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getPlatformRoleName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getPlatformRoleName.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_getPlatformRoleName" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->getPlatformRoleName();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_dump__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  bool arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string result;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_dump" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_dump" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Accessible_dump" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_dump" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      result = ((aal::Accessible const *)arg1)->dump(arg2,(std::string const &)*arg3);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  if (SWIG_IsNewObj(res3)) delete arg3;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_dump__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::string result;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_dump" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accessible_dump" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = ((aal::Accessible const *)arg1)->dump(arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));



  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_dump__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_dump" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      result = ((aal::Accessible const *)arg1)->dump();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible__wrap_Accessible_dump(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;


  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_dump__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_dump__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_dump__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_dump__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Accessible_dump__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Accessible_dump__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }


  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function dump.");

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_printNativeInfo(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_printNativeInfo.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_printNativeInfo" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    try {
      ((aal::Accessible const *)arg1)->printNativeInfo();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_takeScreenShot(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  geometry::Rectangle arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  bool result;

  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_takeScreenShot.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_takeScreenShot" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_takeScreenShot" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_takeScreenShot" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Accessible_takeScreenShot" "', argument " "3"" of type '" "bool""'");
  }
  arg3 = static_cast< bool >(val3);
  {
    res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_geometry__Rectangle,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Accessible_takeScreenShot" "', argument " "4"" of type '" "geometry::Rectangle""'");
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_takeScreenShot" "', argument " "4"" of type '" "geometry::Rectangle""'");
    } else {
      arg4 = *(reinterpret_cast< geometry::Rectangle * >(argp4));
    }
  }
  {
    try {
      result = (bool)((aal::Accessible const *)arg1)->takeScreenShot((std::string const &)*arg2,arg3,arg4);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_bool(static_cast< bool >(result));

  if (SWIG_IsNewObj(res2)) delete arg2;


  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_saveImage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  aal::Accessible *arg1 = (aal::Accessible *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_saveImage.");

  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_aal__Accessible, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_saveImage" "', argument " "1"" of type '" "aal::Accessible const *""'");
  }
  arg1 = reinterpret_cast< aal::Accessible * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accessible_saveImage" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_saveImage" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      ((aal::Accessible const *)arg1)->saveImage((std::string const &)*arg2);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();

  if (SWIG_IsNewObj(res2)) delete arg2;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_getClipboardText(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  std::string result;

  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_getClipboardText.");

  {
    try {
      result = aal::Accessible::getClipboardText();
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(result));

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accessible_setClipboardText(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Value> jsresult;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accessible_setClipboardText.");

  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accessible_setClipboardText" "', argument " "1"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accessible_setClipboardText" "', argument " "1"" of type '" "std::string const &""'");
    }
    arg1 = ptr;
  }
  {
    try {
      aal::Accessible::setClipboardText((std::string const &)*arg1);
    } catch(std::runtime_error e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  if (SWIG_IsNewObj(res1)) delete arg1;

  SWIGV8_RETURN(jsresult);

  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_Accessible(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();

  SWIG_exception(SWIG_ERROR, "Class Accessible can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_aal__TextRangeTo_p_mga__SerializableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mga::SerializableObject *)  ((aal::TextRange *) x));
}
static void *_p_geometry__RectangleTo_p_mga__SerializableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mga::SerializableObject *)  ((geometry::Rectangle *) x));
}
static void *_p_geometry__PointTo_p_mga__SerializableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mga::SerializableObject *)  ((geometry::Point *) x));
}
static void *_p_geometry__SizeTo_p_mga__SerializableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((mga::SerializableObject *)  ((geometry::Size *) x));
}
static swig_type_info _swigt__p_aal__Accessible = {"_p_aal__Accessible", "aal::Accessible *|p_aal__Accessible", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_aal__TextRange = {"_p_aal__TextRange", "aal::TextRange *|p_aal__TextRange", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_geometry__Point = {"_p_geometry__Point", "geometry::Point *|p_geometry__Point", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_geometry__Rectangle = {"_p_geometry__Rectangle", "geometry::Rectangle *|p_geometry__Rectangle", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_geometry__Size = {"_p_geometry__Size", "p_geometry__Size|geometry::Size *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mga__SerializableObject = {"_p_mga__SerializableObject", "mga::SerializableObject *|p_mga__SerializableObject", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_mga__JSVariant_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_RF_t = {"_p_std__functionT_mga__JSVariant_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_RF_t", "mga::PropertyGetter *|std::function< mga::JSVariant (mga::ScriptingContext *,mga::JSExport *,std::string const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmga__JSClass_RF_t = {"_p_std__functionT_void_fmga__JSClass_RF_t", "mga::ClassDefCallback *|std::function< void (mga::JSClass &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmga__JSExport_p_mga__JSValues_RF_t = {"_p_std__functionT_void_fmga__JSExport_p_mga__JSValues_RF_t", "mga::FunctionCallback *|std::function< void (mga::JSExport *,mga::JSValues &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmga__JSObject_RF_t = {"_p_std__functionT_void_fmga__JSObject_RF_t", "mga::ObjectDefCallback *|mga::PrototypeDefCallback *|std::function< void (mga::JSObject &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmga__JSObject_p_mga__JSValues_RF_t = {"_p_std__functionT_void_fmga__JSObject_p_mga__JSValues_RF_t", "mga::ConstructorFunction *|std::function< void (mga::JSObject *,mga::JSValues &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmga__ScriptingContext_R_mga__JSObject_RF_t = {"_p_std__functionT_void_fmga__ScriptingContext_R_mga__JSObject_RF_t", "mga::ModuleActivationFunction *|std::function< void (mga::ScriptingContext &,mga::JSObject &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_R_mga__JSVariant_const_RF_t = {"_p_std__functionT_void_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_R_mga__JSVariant_const_RF_t", "mga::PropertySetter *|std::function< void (mga::ScriptingContext *,mga::JSExport *,std::string const &,mga::JSVariant const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_size_t_t = {"_p_std__setT_size_t_t", "std::set< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_std__vectorT_std__string_t_t = {"_p_std__shared_ptrT_std__vectorT_std__string_t_t", "std::shared_ptr< std::vector< std::string > > *|mga::StringArrayRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unique_ptrT_aal__Accessible_t = {"_p_std__unique_ptrT_aal__Accessible_t", "aal::AccessibleRef *|std::unique_ptr< aal::Accessible > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_aal__AccessibleRef_t = {"_p_std__vectorT_aal__AccessibleRef_t", "std::vector< aal::AccessibleRef > *|aal::AccessibleList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "mga::StringArray *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_aal__Accessible,
  &_swigt__p_aal__TextRange,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_geometry__Point,
  &_swigt__p_geometry__Rectangle,
  &_swigt__p_geometry__Size,
  &_swigt__p_mga__SerializableObject,
  &_swigt__p_size_type,
  &_swigt__p_std__functionT_mga__JSVariant_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_RF_t,
  &_swigt__p_std__functionT_void_fmga__JSClass_RF_t,
  &_swigt__p_std__functionT_void_fmga__JSExport_p_mga__JSValues_RF_t,
  &_swigt__p_std__functionT_void_fmga__JSObject_RF_t,
  &_swigt__p_std__functionT_void_fmga__JSObject_p_mga__JSValues_RF_t,
  &_swigt__p_std__functionT_void_fmga__ScriptingContext_R_mga__JSObject_RF_t,
  &_swigt__p_std__functionT_void_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_R_mga__JSVariant_const_RF_t,
  &_swigt__p_std__setT_size_t_t,
  &_swigt__p_std__shared_ptrT_std__vectorT_std__string_t_t,
  &_swigt__p_std__unique_ptrT_aal__Accessible_t,
  &_swigt__p_std__vectorT_aal__AccessibleRef_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__wstring,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_aal__Accessible[] = {  {&_swigt__p_aal__Accessible, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_aal__TextRange[] = {  {&_swigt__p_aal__TextRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_geometry__Point[] = {  {&_swigt__p_geometry__Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_geometry__Rectangle[] = {  {&_swigt__p_geometry__Rectangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_geometry__Size[] = {  {&_swigt__p_geometry__Size, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mga__SerializableObject[] = {  {&_swigt__p_geometry__Size, _p_geometry__SizeTo_p_mga__SerializableObject, 0, 0},  {&_swigt__p_aal__TextRange, _p_aal__TextRangeTo_p_mga__SerializableObject, 0, 0},  {&_swigt__p_geometry__Rectangle, _p_geometry__RectangleTo_p_mga__SerializableObject, 0, 0},  {&_swigt__p_mga__SerializableObject, 0, 0, 0},  {&_swigt__p_geometry__Point, _p_geometry__PointTo_p_mga__SerializableObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_mga__JSVariant_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_RF_t[] = {  {&_swigt__p_std__functionT_mga__JSVariant_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmga__JSClass_RF_t[] = {  {&_swigt__p_std__functionT_void_fmga__JSClass_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmga__JSExport_p_mga__JSValues_RF_t[] = {  {&_swigt__p_std__functionT_void_fmga__JSExport_p_mga__JSValues_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmga__JSObject_RF_t[] = {  {&_swigt__p_std__functionT_void_fmga__JSObject_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmga__JSObject_p_mga__JSValues_RF_t[] = {  {&_swigt__p_std__functionT_void_fmga__JSObject_p_mga__JSValues_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmga__ScriptingContext_R_mga__JSObject_RF_t[] = {  {&_swigt__p_std__functionT_void_fmga__ScriptingContext_R_mga__JSObject_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_R_mga__JSVariant_const_RF_t[] = {  {&_swigt__p_std__functionT_void_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_R_mga__JSVariant_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_size_t_t[] = {  {&_swigt__p_std__setT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_std__vectorT_std__string_t_t[] = {  {&_swigt__p_std__shared_ptrT_std__vectorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unique_ptrT_aal__Accessible_t[] = {  {&_swigt__p_std__unique_ptrT_aal__Accessible_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_aal__AccessibleRef_t[] = {  {&_swigt__p_std__vectorT_aal__AccessibleRef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_aal__Accessible,
  _swigc__p_aal__TextRange,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_geometry__Point,
  _swigc__p_geometry__Rectangle,
  _swigc__p_geometry__Size,
  _swigc__p_mga__SerializableObject,
  _swigc__p_size_type,
  _swigc__p_std__functionT_mga__JSVariant_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_RF_t,
  _swigc__p_std__functionT_void_fmga__JSClass_RF_t,
  _swigc__p_std__functionT_void_fmga__JSExport_p_mga__JSValues_RF_t,
  _swigc__p_std__functionT_void_fmga__JSObject_RF_t,
  _swigc__p_std__functionT_void_fmga__JSObject_p_mga__JSValues_RF_t,
  _swigc__p_std__functionT_void_fmga__ScriptingContext_R_mga__JSObject_RF_t,
  _swigc__p_std__functionT_void_fmga__ScriptingContext_p_mga__JSExport_p_std__string_const_R_mga__JSVariant_const_RF_t,
  _swigc__p_std__setT_size_t_t,
  _swigc__p_std__shared_ptrT_std__vectorT_std__string_t_t,
  _swigc__p_std__unique_ptrT_aal__Accessible_t,
  _swigc__p_std__vectorT_aal__AccessibleRef_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__wstring,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
#if (V8_MAJOR_VERSION-0) < 5
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("swig_module_info_data"));
  global_obj->SetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey, mod);
#endif
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
#if (V8_MAJOR_VERSION-0) < 5
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("swig_module_info_data"));
  v8::Local<v8::Value> moduleinfo;
  if (!global_obj->GetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey).ToLocal(&moduleinfo))
    return 0;
#endif

  if (moduleinfo.IsEmpty() || moduleinfo->IsNull() || moduleinfo->IsUndefined())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty() || moduleinfo_extern->IsNull() || moduleinfo_extern->IsUndefined())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();

  v8::Handle<v8::Object> exports_obj = exports;


  aal::Accessible::init();


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */


  /* create class templates */
  /* Name: _exports_SerializableObject, Type: p_mga__SerializableObject, Dtor: _wrap_delete_SerializableObject */
v8::Handle<v8::FunctionTemplate> _exports_SerializableObject_class = SWIGV8_CreateClassTemplate("_exports_SerializableObject");
SWIGV8_SET_CLASS_TEMPL(_exports_SerializableObject_clientData.class_templ, _exports_SerializableObject_class);
_exports_SerializableObject_clientData.dtor = _wrap_delete_SerializableObject;
if (SWIGTYPE_p_mga__SerializableObject->clientdata == 0) {
  SWIGTYPE_p_mga__SerializableObject->clientdata = &_exports_SerializableObject_clientData;
}
/* Name: _exports_Point, Type: p_geometry__Point, Dtor: _wrap_delete_Point */
v8::Handle<v8::FunctionTemplate> _exports_Point_class = SWIGV8_CreateClassTemplate("_exports_Point");
SWIGV8_SET_CLASS_TEMPL(_exports_Point_clientData.class_templ, _exports_Point_class);
_exports_Point_clientData.dtor = _wrap_delete_Point;
if (SWIGTYPE_p_geometry__Point->clientdata == 0) {
  SWIGTYPE_p_geometry__Point->clientdata = &_exports_Point_clientData;
}
/* Name: _exports_Size, Type: p_geometry__Size, Dtor: _wrap_delete_Size */
v8::Handle<v8::FunctionTemplate> _exports_Size_class = SWIGV8_CreateClassTemplate("_exports_Size");
SWIGV8_SET_CLASS_TEMPL(_exports_Size_clientData.class_templ, _exports_Size_class);
_exports_Size_clientData.dtor = _wrap_delete_Size;
if (SWIGTYPE_p_geometry__Size->clientdata == 0) {
  SWIGTYPE_p_geometry__Size->clientdata = &_exports_Size_clientData;
}
/* Name: _exports_Rectangle, Type: p_geometry__Rectangle, Dtor: _wrap_delete_Rectangle */
v8::Handle<v8::FunctionTemplate> _exports_Rectangle_class = SWIGV8_CreateClassTemplate("_exports_Rectangle");
SWIGV8_SET_CLASS_TEMPL(_exports_Rectangle_clientData.class_templ, _exports_Rectangle_class);
_exports_Rectangle_clientData.dtor = _wrap_delete_Rectangle;
if (SWIGTYPE_p_geometry__Rectangle->clientdata == 0) {
  SWIGTYPE_p_geometry__Rectangle->clientdata = &_exports_Rectangle_clientData;
}
/* Name: _exports_TextRange, Type: p_aal__TextRange, Dtor: _wrap_delete_TextRange */
v8::Handle<v8::FunctionTemplate> _exports_TextRange_class = SWIGV8_CreateClassTemplate("_exports_TextRange");
SWIGV8_SET_CLASS_TEMPL(_exports_TextRange_clientData.class_templ, _exports_TextRange_class);
_exports_TextRange_clientData.dtor = _wrap_delete_TextRange;
if (SWIGTYPE_p_aal__TextRange->clientdata == 0) {
  SWIGTYPE_p_aal__TextRange->clientdata = &_exports_TextRange_clientData;
}
/* Name: _exports_Accessible, Type: p_aal__Accessible, Dtor: _wrap_delete_Accessible */
v8::Handle<v8::FunctionTemplate> _exports_Accessible_class = SWIGV8_CreateClassTemplate("_exports_Accessible");
SWIGV8_SET_CLASS_TEMPL(_exports_Accessible_clientData.class_templ, _exports_Accessible_class);
_exports_Accessible_clientData.dtor = _wrap_delete_Accessible;
if (SWIGTYPE_p_aal__Accessible->clientdata == 0) {
  SWIGTYPE_p_aal__Accessible->clientdata = &_exports_Accessible_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddStaticVariable(exports_obj, "Success", _wrap_mga_Success, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ScriptError", _wrap_mga_ScriptError, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RunLoopError", _wrap_mga_RunLoopError, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Other", _wrap_mga_Other, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "CompletionFailure", _wrap_mga_CompletionFailure, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_SerializableObject_class, "toJson", _wrap_SerializableObject_toJson);
SWIGV8_AddStaticVariable(exports_obj, "CheckState_Unchecked", _wrap_aal_CheckState_Unchecked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "CheckState_Checked", _wrap_aal_CheckState_Checked, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "CheckState_Indeterminate", _wrap_aal_CheckState_Indeterminate, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "MouseButton_NoButton", _wrap_aal_MouseButton_NoButton, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "MouseButton_Left", _wrap_aal_MouseButton_Left, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "MouseButton_Right", _wrap_aal_MouseButton_Right, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "MouseButton_Middle", _wrap_aal_MouseButton_Middle, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_NoKey", _wrap_aal_Key_NoKey, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Key0", _wrap_aal_Key_Key0, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Key1", _wrap_aal_Key_Key1, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Key2", _wrap_aal_Key_Key2, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Key3", _wrap_aal_Key_Key3, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Key4", _wrap_aal_Key_Key4, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Key5", _wrap_aal_Key_Key5, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Key6", _wrap_aal_Key_Key6, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Key7", _wrap_aal_Key_Key7, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Key8", _wrap_aal_Key_Key8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Key9", _wrap_aal_Key_Key9, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyPlus", _wrap_aal_Key_KeyPlus, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyMinus", _wrap_aal_Key_KeyMinus, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyA", _wrap_aal_Key_KeyA, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyB", _wrap_aal_Key_KeyB, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyC", _wrap_aal_Key_KeyC, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyD", _wrap_aal_Key_KeyD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyE", _wrap_aal_Key_KeyE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF", _wrap_aal_Key_KeyF, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyG", _wrap_aal_Key_KeyG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyH", _wrap_aal_Key_KeyH, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyI", _wrap_aal_Key_KeyI, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyJ", _wrap_aal_Key_KeyJ, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyK", _wrap_aal_Key_KeyK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyL", _wrap_aal_Key_KeyL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyM", _wrap_aal_Key_KeyM, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyN", _wrap_aal_Key_KeyN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyO", _wrap_aal_Key_KeyO, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyP", _wrap_aal_Key_KeyP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyQ", _wrap_aal_Key_KeyQ, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyR", _wrap_aal_Key_KeyR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyS", _wrap_aal_Key_KeyS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyT", _wrap_aal_Key_KeyT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyU", _wrap_aal_Key_KeyU, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyV", _wrap_aal_Key_KeyV, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyW", _wrap_aal_Key_KeyW, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyX", _wrap_aal_Key_KeyX, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyY", _wrap_aal_Key_KeyY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyZ", _wrap_aal_Key_KeyZ, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyTab", _wrap_aal_Key_KeyTab, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyBackspace", _wrap_aal_Key_KeyBackspace, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyReturn", _wrap_aal_Key_KeyReturn, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyDot", _wrap_aal_Key_KeyDot, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyComma", _wrap_aal_Key_KeyComma, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyColon", _wrap_aal_Key_KeyColon, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeySlash", _wrap_aal_Key_KeySlash, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyBackslash", _wrap_aal_Key_KeyBackslash, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyBraceLeft", _wrap_aal_Key_KeyBraceLeft, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyBraceRight", _wrap_aal_Key_KeyBraceRight, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyDelete", _wrap_aal_Key_KeyDelete, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyUp", _wrap_aal_Key_KeyUp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyEscape", _wrap_aal_Key_KeyEscape, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyDown", _wrap_aal_Key_KeyDown, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyLeft", _wrap_aal_Key_KeyLeft, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyRight", _wrap_aal_Key_KeyRight, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyPageUp", _wrap_aal_Key_KeyPageUp, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyPageDown", _wrap_aal_Key_KeyPageDown, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyEnd", _wrap_aal_Key_KeyEnd, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyHome", _wrap_aal_Key_KeyHome, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeySpace", _wrap_aal_Key_KeySpace, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF1", _wrap_aal_Key_KeyF1, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF2", _wrap_aal_Key_KeyF2, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF3", _wrap_aal_Key_KeyF3, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF4", _wrap_aal_Key_KeyF4, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF5", _wrap_aal_Key_KeyF5, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF6", _wrap_aal_Key_KeyF6, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF7", _wrap_aal_Key_KeyF7, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF8", _wrap_aal_Key_KeyF8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF9", _wrap_aal_Key_KeyF9, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF10", _wrap_aal_Key_KeyF10, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF11", _wrap_aal_Key_KeyF11, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_KeyF12", _wrap_aal_Key_KeyF12, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Key_Sentinel", _wrap_aal_Key_Sentinel, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Modifier_NoModifier", _wrap_aal_Modifier_NoModifier, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Modifier_ShiftLeft", _wrap_aal_Modifier_ShiftLeft, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Modifier_ShiftRight", _wrap_aal_Modifier_ShiftRight, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Modifier_ControlLeft", _wrap_aal_Modifier_ControlLeft, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Modifier_ControlRight", _wrap_aal_Modifier_ControlRight, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Modifier_AltLeft", _wrap_aal_Modifier_AltLeft, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Modifier_AltRight", _wrap_aal_Modifier_AltRight, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Modifier_MetaLeft", _wrap_aal_Modifier_MetaLeft, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Modifier_MetaRight", _wrap_aal_Modifier_MetaRight, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_Point_class, "x", _wrap_Point_x_get, _wrap_Point_x_set);
SWIGV8_AddMemberVariable(_exports_Point_class, "y", _wrap_Point_y_get, _wrap_Point_y_set);
SWIGV8_AddMemberFunction(_exports_Point_class, "toJson", _wrap_Point_toJson);
SWIGV8_AddMemberVariable(_exports_Size_class, "width", _wrap_Size_width_get, _wrap_Size_width_set);
SWIGV8_AddMemberVariable(_exports_Size_class, "height", _wrap_Size_height_get, _wrap_Size_height_set);
SWIGV8_AddMemberFunction(_exports_Size_class, "toJson", _wrap_Size_toJson);
SWIGV8_AddMemberVariable(_exports_Rectangle_class, "position", _wrap_Rectangle_position_get, _wrap_Rectangle_position_set);
SWIGV8_AddMemberVariable(_exports_Rectangle_class, "size", _wrap_Rectangle_size_get, _wrap_Rectangle_size_set);
SWIGV8_AddMemberFunction(_exports_Rectangle_class, "contains", _wrap_Rectangle__wrap_Rectangle_contains);
SWIGV8_AddMemberFunction(_exports_Rectangle_class, "empty", _wrap_Rectangle_empty);
SWIGV8_AddMemberFunction(_exports_Rectangle_class, "minX", _wrap_Rectangle_minX);
SWIGV8_AddMemberFunction(_exports_Rectangle_class, "maxX", _wrap_Rectangle_maxX);
SWIGV8_AddMemberFunction(_exports_Rectangle_class, "minY", _wrap_Rectangle_minY);
SWIGV8_AddMemberFunction(_exports_Rectangle_class, "maxY", _wrap_Rectangle_maxY);
SWIGV8_AddMemberFunction(_exports_Rectangle_class, "toJson", _wrap_Rectangle_toJson);
SWIGV8_AddMemberVariable(_exports_TextRange_class, "start", _wrap_TextRange_start_get, _wrap_TextRange_start_set);
SWIGV8_AddMemberVariable(_exports_TextRange_class, "end", _wrap_TextRange_end_get, _wrap_TextRange_end_set);
SWIGV8_AddMemberFunction(_exports_TextRange_class, "isEmpty", _wrap_TextRange_isEmpty);
SWIGV8_AddMemberFunction(_exports_TextRange_class, "toJson", _wrap_TextRange_toJson);
SWIGV8_AddStaticVariable(exports_obj, "Role_Unknown", _wrap_aal_Role_Unknown, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Any", _wrap_aal_Role_Any, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Application", _wrap_aal_Role_Application, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Window", _wrap_aal_Role_Window, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Button", _wrap_aal_Role_Button, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_RadioButton", _wrap_aal_Role_RadioButton, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_RadioGroup", _wrap_aal_Role_RadioGroup, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_CheckBox", _wrap_aal_Role_CheckBox, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_ComboBox", _wrap_aal_Role_ComboBox, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Expander", _wrap_aal_Role_Expander, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Grid", _wrap_aal_Role_Grid, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_TextBox", _wrap_aal_Role_TextBox, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_TreeView", _wrap_aal_Role_TreeView, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Label", _wrap_aal_Role_Label, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Pane", _wrap_aal_Role_Pane, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Menu", _wrap_aal_Role_Menu, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_MenuBar", _wrap_aal_Role_MenuBar, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_MenuItem", _wrap_aal_Role_MenuItem, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Separator", _wrap_aal_Role_Separator, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_SplitContainer", _wrap_aal_Role_SplitContainer, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Splitter", _wrap_aal_Role_Splitter, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_GroupBox", _wrap_aal_Role_GroupBox, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Image", _wrap_aal_Role_Image, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_TabView", _wrap_aal_Role_TabView, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_TabPage", _wrap_aal_Role_TabPage, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_DatePicker", _wrap_aal_Role_DatePicker, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Row", _wrap_aal_Role_Row, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Column", _wrap_aal_Role_Column, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Cell", _wrap_aal_Role_Cell, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_ScrollBox", _wrap_aal_Role_ScrollBox, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Slider", _wrap_aal_Role_Slider, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Stepper", _wrap_aal_Role_Stepper, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_List", _wrap_aal_Role_List, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_IconView", _wrap_aal_Role_IconView, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_ProgressIndicator", _wrap_aal_Role_ProgressIndicator, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_BusyIndicator", _wrap_aal_Role_BusyIndicator, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_ScrollBar", _wrap_aal_Role_ScrollBar, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_ScrollThumb", _wrap_aal_Role_ScrollThumb, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_HyperLink", _wrap_aal_Role_HyperLink, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "Role_Sentinel", _wrap_aal_Role_Sentinel, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "clone", _wrap_Accessible_clone);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isRoot", _wrap_Accessible_isRoot);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isValid", _wrap_Accessible_isValid);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "equals", _wrap_Accessible_equals);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "canFocus", _wrap_Accessible_canFocus);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isFocused", _wrap_Accessible_isFocused);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setFocused", _wrap_Accessible_setFocused);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isEnabled", _wrap_Accessible_isEnabled);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setEnabled", _wrap_Accessible_setEnabled);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isEditable", _wrap_Accessible_isEditable);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isReadOnly", _wrap_Accessible_isReadOnly);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isSecure", _wrap_Accessible_isSecure);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isHorizontal", _wrap_Accessible_isHorizontal);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getCheckState", _wrap_Accessible_getCheckState);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setCheckState", _wrap_Accessible_setCheckState);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getValue", _wrap_Accessible_getValue);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getMaxValue", _wrap_Accessible_getMaxValue);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getMinValue", _wrap_Accessible_getMinValue);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setValue", _wrap_Accessible_setValue);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getRange", _wrap_Accessible_getRange);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getActiveTabPage", _wrap_Accessible_getActiveTabPage);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setActiveTabPage", _wrap_Accessible_setActiveTabPage);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "activate", _wrap_Accessible_activate);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isActiveTab", _wrap_Accessible_isActiveTab);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isSelected", _wrap_Accessible_isSelected);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setSelected", _wrap_Accessible_setSelected);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getScrollPosition", _wrap_Accessible_getScrollPosition);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setScrollPosition", _wrap_Accessible_setScrollPosition);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getParent", _wrap_Accessible_getParent);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getContainingRow", _wrap_Accessible_getContainingRow);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getHorizontalScrollBar", _wrap_Accessible_getHorizontalScrollBar);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getVerticalScrollBar", _wrap_Accessible_getVerticalScrollBar);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getHeader", _wrap_Accessible_getHeader);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getCloseButton", _wrap_Accessible_getCloseButton);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "children", _wrap_Accessible__wrap_Accessible_children);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "windows", _wrap_Accessible_windows);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "tabPages", _wrap_Accessible_tabPages);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "rows", _wrap_Accessible_rows);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "rowEntries", _wrap_Accessible_rowEntries);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "columns", _wrap_Accessible_columns);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "columnEntries", _wrap_Accessible_columnEntries);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getID", _wrap_Accessible_getID);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getName", _wrap_Accessible_getName);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getHelp", _wrap_Accessible_getHelp);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getRole", _wrap_Accessible_getRole);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isInternal", _wrap_Accessible_isInternal);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getCaretPosition", _wrap_Accessible_getCaretPosition);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setCaretPosition", _wrap_Accessible_setCaretPosition);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getBounds", _wrap_Accessible_getBounds);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setBounds", _wrap_Accessible_setBounds);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "insertText", _wrap_Accessible_insertText);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getText", _wrap_Accessible_getText);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getTitle", _wrap_Accessible_getTitle);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setText", _wrap_Accessible_setText);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setTitle", _wrap_Accessible_setTitle);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getDescription", _wrap_Accessible_getDescription);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "menuShown", _wrap_Accessible_menuShown);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "showMenu", _wrap_Accessible_showMenu);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getSelectedText", _wrap_Accessible_getSelectedText);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setSelectedText", _wrap_Accessible_setSelectedText);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getSelectionRange", _wrap_Accessible_getSelectionRange);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setSelectionRange", _wrap_Accessible_setSelectionRange);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getDate", _wrap_Accessible_getDate);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setDate", _wrap_Accessible_setDate);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getCharacterCount", _wrap_Accessible_getCharacterCount);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getSelectedIndexes", _wrap_Accessible_getSelectedIndexes);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setSelectedIndexes", _wrap_Accessible_setSelectedIndexes);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "mouseDown", _wrap_Accessible__wrap_Accessible_mouseDown);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "mouseUp", _wrap_Accessible__wrap_Accessible_mouseUp);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "mouseMove", _wrap_Accessible_mouseMove);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "mouseMoveTo", _wrap_Accessible_mouseMoveTo);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "mouseDrag", _wrap_Accessible__wrap_Accessible_mouseDrag);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getMousePosition", _wrap_Accessible_getMousePosition);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "keyDown", _wrap_Accessible_keyDown);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "keyUp", _wrap_Accessible_keyUp);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "keyPress", _wrap_Accessible_keyPress);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "typeString", _wrap_Accessible_typeString);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "click", _wrap_Accessible_click);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "confirm", _wrap_Accessible_confirm);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "stepUp", _wrap_Accessible_stepUp);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "stepDown", _wrap_Accessible_stepDown);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "scrollLeft", _wrap_Accessible_scrollLeft);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "scrollRight", _wrap_Accessible_scrollRight);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "scrollUp", _wrap_Accessible_scrollUp);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "scrollDown", _wrap_Accessible_scrollDown);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "increment", _wrap_Accessible_increment);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "decrement", _wrap_Accessible_decrement);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "show", _wrap_Accessible_show);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "bringToFront", _wrap_Accessible_bringToFront);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "highlight", _wrap_Accessible_highlight);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "removeHighlight", _wrap_Accessible_removeHighlight);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isExpandable", _wrap_Accessible_isExpandable);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "isExpanded", _wrap_Accessible_isExpanded);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "setExpanded", _wrap_Accessible_setExpanded);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "getPlatformRoleName", _wrap_Accessible_getPlatformRoleName);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "dump", _wrap_Accessible__wrap_Accessible_dump);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "printNativeInfo", _wrap_Accessible_printNativeInfo);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "takeScreenShot", _wrap_Accessible_takeScreenShot);
SWIGV8_AddMemberFunction(_exports_Accessible_class, "saveImage", _wrap_Accessible_saveImage);


  /* setup inheritances */
  if (SWIGTYPE_p_mga__SerializableObject->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Point_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ);
#else
  _exports_Point_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ)
    );
#endif

#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Point _mga__SerializableObject\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Point _mga__SerializableObject\n");
#endif
}
if (SWIGTYPE_p_mga__SerializableObject->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Size_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ);
#else
  _exports_Size_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ)
    );
#endif

#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Size _mga__SerializableObject\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Size _mga__SerializableObject\n");
#endif
}
if (SWIGTYPE_p_mga__SerializableObject->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Rectangle_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ);
#else
  _exports_Rectangle_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ)
    );
#endif

#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Rectangle _mga__SerializableObject\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Rectangle _mga__SerializableObject\n");
#endif
}
if (SWIGTYPE_p_mga__SerializableObject->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_TextRange_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ);
#else
  _exports_TextRange_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_mga__SerializableObject->clientdata)->class_templ)
    );
#endif

#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_TextRange _mga__SerializableObject\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_TextRange _mga__SerializableObject\n");
#endif
}


  /* class instances */
  /* Class: SerializableObject (_exports_SerializableObject) */
v8::Handle<v8::FunctionTemplate> _exports_SerializableObject_class_0 = SWIGV8_CreateClassTemplate("SerializableObject");
_exports_SerializableObject_class_0->SetCallHandler(_wrap_new_veto_SerializableObject);
_exports_SerializableObject_class_0->Inherit(_exports_SerializableObject_class);
_exports_SerializableObject_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_SerializableObject_obj = _exports_SerializableObject_class_0->GetFunction();
/* Class: Point (_exports_Point) */
v8::Handle<v8::FunctionTemplate> _exports_Point_class_0 = SWIGV8_CreateClassTemplate("Point");
_exports_Point_class_0->SetCallHandler(_wrap_new_Point);
_exports_Point_class_0->Inherit(_exports_Point_class);
_exports_Point_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Point_obj = _exports_Point_class_0->GetFunction();
/* Class: Size (_exports_Size) */
v8::Handle<v8::FunctionTemplate> _exports_Size_class_0 = SWIGV8_CreateClassTemplate("Size");
_exports_Size_class_0->SetCallHandler(_wrap_new_Size);
_exports_Size_class_0->Inherit(_exports_Size_class);
_exports_Size_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Size_obj = _exports_Size_class_0->GetFunction();
/* Class: Rectangle (_exports_Rectangle) */
v8::Handle<v8::FunctionTemplate> _exports_Rectangle_class_0 = SWIGV8_CreateClassTemplate("Rectangle");
_exports_Rectangle_class_0->SetCallHandler(_wrap_new_Rectangle);
_exports_Rectangle_class_0->Inherit(_exports_Rectangle_class);
_exports_Rectangle_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Rectangle_obj = _exports_Rectangle_class_0->GetFunction();
/* Class: TextRange (_exports_TextRange) */
v8::Handle<v8::FunctionTemplate> _exports_TextRange_class_0 = SWIGV8_CreateClassTemplate("TextRange");
_exports_TextRange_class_0->SetCallHandler(_wrap_new_TextRange);
_exports_TextRange_class_0->Inherit(_exports_TextRange_class);
_exports_TextRange_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TextRange_obj = _exports_TextRange_class_0->GetFunction();
/* Class: Accessible (_exports_Accessible) */
v8::Handle<v8::FunctionTemplate> _exports_Accessible_class_0 = SWIGV8_CreateClassTemplate("Accessible");
_exports_Accessible_class_0->SetCallHandler(_wrap_new_veto_Accessible);
_exports_Accessible_class_0->Inherit(_exports_Accessible_class);
_exports_Accessible_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Accessible_obj = _exports_Accessible_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(exports_obj, "keyToString", _wrap_keyToString);
SWIGV8_AddStaticFunction(exports_obj, "modifierToString", _wrap_modifierToString);
SWIGV8_AddStaticFunction(exports_obj, "containsModifier", _wrap_containsModifier);
SWIGV8_AddStaticFunction(exports_obj, "modifierFromNumber", _wrap_modifierFromNumber);
SWIGV8_AddStaticFunction(exports_obj, "methodNotImplemented", _wrap_methodNotImplemented);
SWIGV8_AddStaticFunction(exports_obj, "roleToString", _wrap_roleToString);
SWIGV8_AddStaticFunction(exports_obj, "roleToFriendlyString", _wrap_roleToFriendlyString);
SWIGV8_AddStaticFunction(exports_obj, "roleToJSType", _wrap_roleToJSType);
SWIGV8_AddStaticFunction(_exports_Accessible_obj, "init", _wrap_Accessible_init);
SWIGV8_AddStaticFunction(_exports_Accessible_obj, "accessibilitySetup", _wrap_Accessible_accessibilitySetup);
SWIGV8_AddStaticFunction(_exports_Accessible_obj, "getByPid", _wrap_Accessible_getByPid);
SWIGV8_AddStaticFunction(_exports_Accessible_obj, "getRunningProcess", _wrap_Accessible_getRunningProcess);
SWIGV8_AddStaticFunction(_exports_Accessible_obj, "getRunningProcessByName", _wrap_Accessible_getRunningProcessByName);
SWIGV8_AddStaticFunction(_exports_Accessible_obj, "fromPoint", _wrap_Accessible_fromPoint);
SWIGV8_AddStaticFunction(_exports_Accessible_obj, "getClipboardText", _wrap_Accessible_getClipboardText);
SWIGV8_AddStaticFunction(_exports_Accessible_obj, "setClipboardText", _wrap_Accessible_setClipboardText);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("SerializableObject"), _exports_SerializableObject_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Point"), _exports_Point_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Size"), _exports_Size_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Rectangle"), _exports_Rectangle_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TextRange"), _exports_TextRange_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Accessible"), _exports_Accessible_obj);


  /* create and register namespace objects */

}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(node_aal, node_aal_initialize)
#endif
